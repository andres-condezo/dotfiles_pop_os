"--------------------------------
"-------------------------------- OPTIONS 

filetype plugin indent on
syntax enable

set ignorecase
set smartcase
set path+=**
set termguicolors            " Active true colors en la terminal
set nocompatible
set numberwidth=1
set showcmd
set cmdheight=2
set showmatch
set laststatus=2
set title
set spelllang=en,es          " Corregir palabras usando diccionarios en inglés y español
set hidden                   " Required to keep multiple buffers open multiple buffers
set pumheight=10             " Makes pop up menu smaller
set fileencoding=utf-8       " The encoding written to file
set encoding=utf-8           " The encoding displayed
set ruler                               " Show the cursor position all the time
set cmdheight=2                         " More space for displaying messages
set iskeyword+=-                        " treat dash separated words as a word text object"
set mouse=a                             " Enable your mouse
set splitbelow                          " Horizontal splits will automatically be below
set splitright                          " Vertical splits will automatically be to the right
set t_Co=256                            " Support 256 colors
set conceallevel=0                      " So that I can see `` in markdown files
set shiftwidth=2
set smartindent                         " Makes indenting smart
set autoindent                          " Good auto indent
set laststatus=0                        " Always display the status line
set number                              " Line numbers
set relativenumber
set cursorline                          " Enable highlighting of the current line
set background=dark                     " tell vim what the background color looks like
set hidden                              " Permitir cambiar de buffers sin tener que guardarlos
set nobackup                            " This is recommended by coc
set nowritebackup                       " This is recommended by coc
set updatetime=300                      " Faster completion
set timeoutlen=500                      " By default timeout Len is 1000 ms
set formatoptions-=cro
set autochdir                           " Your working directory will always be the same as your working directory
set hlsearch
set incsearch
set wildmenu
set wildmode=longest,list,full
set undofile
set undodir=/home/user02/.vimundo/ 
set clipboard=unnamedplus
set go+=a 
set whichwrap+=<,>,[,],h,l
set shortmess=c
set showtabline=2
set scrolloff=7
set sidescrolloff=7 

"--------------------------------
"-------------------------------- MAPLEADER
let mapleader=" "

"--------------------------------
"-------------------------------- COLOR SCHEME
colorscheme darkblue 
let g:gruvbox_contrast_dark = "hard"

"--------------------------------
"-------------------------------- KEYMAPS
execute "set <M-h>=\eh"
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"
execute "set <M-l>=\el"

" inoremap ji <ESC>

vnoremap p "_dP

nmap <Leader>w :w!<CR>
nmap <Leader>wa <cmd>execute ':wa' <bar> wq<CR>
nmap <Leader>wq :wq<CR>
nmap <Leader>ws <cmd>execute ':silent! w !sudo tee % > /dev/null' <bar> edit!<CR>
nmap <Leader>q :q!<CR>
nmap <Leader>Q :qa!<CR>

map <Leader>ll :setlocal spell! spelllang=en_us<CR>

" Enable and disable  autocoment
map <Leader>dc :setlocal formatoptions-=cro<CR>
map <Leader>ec :setlocal formatoptions=cro<CR>

nmap <Leader>rp :%s//gIc<Left><Left><Left><Left>

nnoremap <C-j> J
nnoremap <C-k> K

nnoremap J }
nnoremap K {
vnoremap J }
vnoremap K {

vnoremap > >gv
vnoremap < <gv

nnoremap n nzz
nnoremap N Nzz

nnoremap U <C-r>

command! Reload execute "source ~/.vimrc"
nnoremap <C-r> :Reload<CR>

nnoremap <Leader>sc :Colors<CR>
nnoremap <Leader>sh :History<CR>

nnoremap ms /
nnoremap me :e .env<CR>
nnoremap mr :e requests.http<CR>

nnoremap <C-l> :noh<CR>

nnoremap <Leader>d :tab DBUI<CR>

" Move text up and down
vnoremap <M-j> :move '>+1<CR>gv-gv 
vnoremap <M-k> :move '<-2<CR>gv-gv 

"--------------------------------
"-------------------------------- TABS
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround
set smarttab
set expandtab

"----------------------------------
"---------------------------------- SPLITS
" Remove pipes
set fillchars+=vert:\ "

" Splits
nnoremap <Leader>h :split<CR>
nnoremap <Leader>v :vsplit<CR>
"resize splits
nnoremap <silent> <Leader>< :vertical resize +5<CR>
nnoremap <silent> <Leader>> :vertical resize -5<CR>
nnoremap <silent> <Leader>+ :resize +3<CR>
nnoremap <silent> <Leader>- :resize -3<CR>
nnoremap <silent> <C-w><C-e> <C-w>=

" Splits navigation
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l

" Change splits from vertical to horizontal or vice versa
map <Leader>th <C-w>t<C-w>H
map <Leader>tk <C-w>t<C-w>K

" Swap split
map <C-x> <C-w>R

"----------------------------------
"---------------------------------- TERMINAL

map <Leader>trm :terminal<CR>
map <Leader>trh :new term://zsh<CR>
map <Leader>trv :vnew term://zsh<CR>
" start terminal in insert mode
au BufEnter * if &buftype == 'terminal' | :startinsert | endif

" Splits navigation from terminal
tnoremap <C-j>  <C-\><C-n><C-w>j
tnoremap <C-k>  <C-\><C-n><C-w>k
tnoremap <C-l>  <C-\><C-n><C-w>l
tnoremap <C-h>  <C-\><C-n><C-w>h
" Resize splits from terminal
tnoremap <silent> <C-Up> :resize +3<CR>
tnoremap <silent> <C-Down> :resize -3<CR>
tnoremap <silent> <C-Left> :vertical resize +5<CR>
tnoremap <silent> <C-Right> :vertical resize -5<CR>

"----------------------------------
"---------------------------------- BUFFERS
map <S-h> :bprevious<CR>
map <S-l> :bnext<CR>
map <Leader>c :bdelete<CR>
map <Leader>o :on<CR>

"--------------------------------
"-------------------------------- FUNCTIONS

" Remember line number
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Fix cursor
if &term =~ '^xterm'
  " normal mode
  let &t_EI .= "\<Esc>[0 q"
  " insert mode
  let &t_SI .= "\<Esc>[6 q"
endif

"Toggle relative line numbers
function! RelativeNumberToggle()
  set relativenumber!
endfunction
noremap <silent> mtn <cmd>call RelativeNumberToggle()<CR>

"Toggle Wrap mode
function! WrapToggle()
  set wrap!
endfunction
noremap <silent> mtw <cmd>call WrapToggle()<CR>

function! Test()
  echo "my fun"
endfunction

"--------------------------------
"-------------------------------- CUSTOM MODES
function! NormalMode()
  if exists('b:WindowsMode')
    unlet b:WindowsMode
  elseif exists('b:MarkdownMode')
    unlet b:MarkdownMode
  endif
  colorscheme codedark
endfunction
noremap <C-i> <cmd>call NormalMode()<CR>

"--- WINDOWS MODE

function! WindowsMode()
  let b:WindowsMode=1
  colorscheme onedark
endfunction
nnoremap <silent> mhw <cmd>call WindowsMode()<Cr>

" Resize
nnoremap <expr> < exists('b:WindowsMode') ? ':vertical resize +5<CR>' : '<' 
nnoremap <expr> > exists('b:WindowsMode') ? ':vertical resize -5<CR>' : '>' 
nnoremap <expr> + exists('b:WindowsMode') ? ':resize +3<CR>' : '+' 
nnoremap <expr> - exists('b:WindowsMode') ? ':resize -3<CR>' : '-' 
nnoremap <expr> = exists('b:WindowsMode') ? '<C-w>=' : '=' 

" Scroll
nnoremap <expr> h exists('b:WindowsMode') ? '7zh' : 'h' 
nnoremap <expr> l exists('b:WindowsMode') ? '7zl' : 'l' 
nnoremap <expr> k exists('b:WindowsMode') ? '7<C-y>' : 'k' 
nnoremap <expr> j exists('b:WindowsMode') ? '7<C-e>' : 'j' 

"--- MARKDOWN MODE

function! MarkdownMode()
  let b:MarkdownMode=1
  colorscheme onedark
endfunction
nnoremap <silent> mhm <cmd>call MarkdownMode()<Cr>

let g:mkdp_browser = "surf"
let g:mkdp_open_to_the_world = 1
let g:mkdp_port = "57843"

" Index
nnoremap <expr> II exists('b:MarkdownMode') ? '<C-w>h' : 'II' 
nnoremap <expr> IP exists('b:MarkdownMode') ? '<cmd>Toc<CR><C-w>H<cmd>vertical resize 30<CR><CR>' : 'IP' 
nnoremap <expr> gi exists('b:MarkdownMode') ? ':GenTocGFM<CR>' : 'gi' 

" -- Nav
nnoremap <expr> j exists('b:MarkdownMode') ? '<Plug>Markdown_MoveToNextHeader' : 'j' 
nnoremap <expr> k exists('b:MarkdownMode') ? '<Plug>Markdown_MoveToPreviousHeader' : 'k' 
nnoremap <expr> l exists('b:MarkdownMode') ? '<Plug>Markdown_MoveToNextSiblingHeader' : 'l' 
nnoremap <expr> h exists('b:MarkdownMode') ? '<Plug>Markdown_MoveToPreviousSiblingHeader' : 'h' 
" { 'ge', '<Plug>Markdown_EditUrlUnderCursor', { silent = true } },
" { 'gu', '<Plug>Markdown_MoveToParentHeader', { silent = true } },
" { 'gx', '<Plug>Markdown_OpenUrlUnderCursor', { desc = "<-Nav|", silent = true } },

" -- Mode
" { 'gm', ':set filetype=markdown<CR>', { silent = true } },
" { 'gw', ':set filetype=vimwiki<CR>', { silent = true } },
nnoremap <expr> P exists('b:MarkdownMode') ? ':MarkdownPreviewToggle<CR>' : 'P' 
nnoremap <expr> T exists('b:MarkdownMode') ? ':TableModeToggle<CR>' : 'T' 
" { 'X', '<cmd>Toc<CR><C-w>H<cmd>vertical resize 20<CR><CR> \
" | :TableModeEnable<CR> \
" | :MarkdownPreviewToggle<CR>', { desc = "<-Mode|", silent = true } },

" -- Resize
" { 'F', '<cmd>TableFormat<CR>', { desc = "<-Format|", silent = true } },

" -- Resize
" { '+', ':HeaderIncrease<CR>', { silent = true } },
" { '-', ':HeaderDecrease<CR>', { desc = "<-Resize|", silent = true } },
